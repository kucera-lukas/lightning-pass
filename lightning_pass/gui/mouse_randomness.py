from typing import List, Tuple

from passgen import passgen
from PyQt5 import QtCore
from PyQt5.QtWidgets import QLabel


class MouseTracker(QtCore.QObject):
    """This class contains functionality for setting up a mouse tracker over a chosen label.

    :param QLabel widget: QLabel widget which will be used for tracking

    """

    positionChanged = QtCore.pyqtSignal(QtCore.QPoint)

    def __init__(self, widget: QLabel) -> None:
        """Class contructor."""
        super().__init__(widget)
        self._widget = widget
        self.widget.setMouseTracking(True)
        self.widget.installEventFilter(self)

    @property
    def widget(self) -> QLabel:
        return self._widget

    def eventFilter(self, o: QLabel, e: QtCore.QEvent.MouseMove) -> object:
        """Event filter

        :param QLabel o: label object
        :param MouseMove e: mouse move event

        :returns eventFilter of super class

        """
        if o is self.widget and e.type() == QtCore.QEvent.MouseMove:
            self.positionChanged.emit(e.pos())
        return super().eventFilter(o, e)

    @staticmethod
    def setup_tracker(label: QLabel, on_change) -> None:
        """Setup a mouse tracker over a specified label."""
        tracker = MouseTracker(label)
        tracker.positionChanged.connect(on_change)


class Collector:
    """This class contains functionality for recording current mouse position."""

    def __init__(self):
        """Class contructor."""
        self.randomness_lst = []  # List[Tuple[int, int]]

    def __repr__(self) -> str:
        """Provide information about this class."""
        return f"Collector({self.randomness_lst})"

    def collect_position(self, pos: QtCore.QPoint) -> str or bool:
        """Collect mouse position.

        :param QPoint pos: current cursor position

        :returns True: If current number of position can be divided by 10 without any remainder.
        :rtype bool
        :returns "Done": If 1000 position have been collected.
        :rtype str

        """
        if len(self.randomness_lst) <= 999:
            self.randomness_lst.append("(%d, %d)" % (pos.x(), pos.y()))
            if len(self.randomness_lst) % 10 == 0:
                return True
        else:
            return "Done"


class Generator:
    """This class holds user's chosen parameters for password generation
    and contains the password generation functionality.

    :param list randomness_lst: information about mouse positions
    :param int length: password length
    :param bool numbers: password option
    :param bool symbols: password option
    :param bool lowercase: password option
    :param bool uppercase: password option

    """

    def __init__(
        self,
        randomness_lst: List[Tuple[int, int]],
        length: int,
        numbers: bool,
        symbols: bool,
        lowercase: bool,
        uppercase: bool,
    ) -> None:
        """Class contructor."""
        self.val_lst = randomness_lst
        self.length = length
        self.numbers = numbers
        self.symbols = symbols
        self.lowercase = lowercase
        self.uppercase = uppercase

    def __repr__(self) -> str:
        """Provide information about this class."""
        return f"""Generator(
               {self.val_lst},
               {self.length},
               {self.numbers},
               {self.symbols},
               {self.lowercase},
               {self.uppercase})
               """

    @property
    def generate_password(self, case_type: str = "both") -> str:
        """Generate a password by passgen library.
        Password generation is based on the chosen parameters in the GUI.

        :param str case_type: "both" as a default case

        :returns password: password generated by passgen
        :rtype str

        """
        if self.lowercase and self.uppercase:
            case_type = "both"
        elif self.lowercase is False:
            case_type = "upper"
        elif self.uppercase is False:
            case_type = "lower"

        password = passgen(
            length=self.length,
            punctuation=self.symbols,
            digits=self.numbers,
            case=case_type,
        )
        return password
