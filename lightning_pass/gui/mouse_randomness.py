from passgen import passgen
from PyQt5 import QtCore


class MouseTracker(QtCore.QObject):
    positionChanged = QtCore.pyqtSignal(QtCore.QPoint)

    def __init__(self, widget):
        """Class contructor."""
        super().__init__(widget)
        self._widget = widget
        self.widget.setMouseTracking(True)
        self.widget.installEventFilter(self)

    @property
    def widget(self):
        return self._widget

    def eventFilter(self, o, e):
        """Event filter"""
        if o is self.widget and e.type() == QtCore.QEvent.MouseMove:
            self.positionChanged.emit(e.pos())
        return super().eventFilter(o, e)

    @staticmethod
    def setup_tracker(label, on_change):
        """Setup a mouse tracker over a specified label."""
        tracker = MouseTracker(label)
        tracker.positionChanged.connect(on_change)


class Collector:
    """The Collector class contains functionality for recording current mouse position."""

    def __init__(self):
        """Class contructor."""
        self.randomness_lst = []

    def __repr__(self):
        """Provide information about this class."""
        return f"Collector({self.randomness_lst})"

    def collect_position(self, pos):
        """Collect mouse position.

        :param QPoint pos: current cursor position

        :returns True: If current number of position can be divided by 10 without any remainder.
        :rtype bool

        :returns "Done": If 1000 position have been collected.
        :rtype str

        """
        if len(self.randomness_lst) <= 999:
            self.randomness_lst.append("(%d, %d)" % (pos.x(), pos.y()))
            if len(self.randomness_lst) % 10 == 0:
                return True
        else:
            return "Done"


class Generator:
    """The Generator class holds user's chosen parameters for password generation
    and contains the password generation functionality."""

    def __init__(
        self,
        randomness_lst,
        length,
        numbers,
        symbols,
        lowercase,
        uppercase,
    ):
        """Class contructor."""
        self.val_lst = randomness_lst
        self.length = length
        self.numbers = numbers
        self.symbols = symbols
        self.lowercase = lowercase
        self.uppercase = uppercase

    def __repr__(self):
        """Provide information about this class."""
        return f"""Generator(
               {self.val_lst},
               {self.length},
               {self.numbers},
               {self.symbols},
               {self.lowercase},
               {self.uppercase})"""

    def generate_password(self):
        """Generate a password by passgen library.
        Password generation is based on the chosen parameters in the GUI.

        :returns password: password generated by passgen
        :rtype str

        """
        if self.lowercase and self.uppercase:
            case_type = "both"
        elif self.lowercase is False:
            case_type = "upper"
        elif self.uppercase is False:
            case_type = "lower"

        password = passgen(
            length=self.length,
            punctuation=self.symbols,
            digits=self.numbers,
            case=case_type,
        )
        return password
